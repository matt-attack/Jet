
fun Jet::Compilation* MakeCompilation(char* project)
{
	let Jet::Compilation q;
	let c = &q;//new Jet::Compilation;
	let ctx = LLVMContextCreate();
	
	c->module = LLVMModuleCreateWithNameInContext("test", ctx);
	let voidt = LLVMVoidTypeInContext(ctx);
	
	let funtype = LLVMFunctionType(voidt, 0, 0, 0);
	
	let char* msg = 0;
	LLVMDumpType(funtype);
	let fn = LLVMAddFunction(c->module, "test", funtype);
	
	let entry = LLVMAppendBasicBlock(fn, "entry");

	let builder = LLVMCreateBuilderInContext(ctx);
	LLVMPositionBuilderAtEnd(builder, entry);
	LLVMBuildRetVoid(builder);

	LLVMPrintModuleToFile(c->module, "out.txt", &msg);
	LLVMDumpModule(c->module);
	
	
	//init stuff
	LLVMInitializeX86TargetInfo();
	LLVMInitializeX86Target();
	LLVMInitializeX86TargetMC();
	LLVMInitializeX86AsmPrinter();
	
	let char* error = 0;
	let triple = LLVMGetDefaultTargetTriple();
	let LLVMTargetRef target;
	LLVMGetTargetFromTriple(triple, &target, &error);
	
	
	let cpu = "haswell";
	let mach = LLVMCreateTargetMachine(target, triple, cpu, "",
		0/*level*/, 0/*reloc*/, 0/*codemodel*/);
	
	//local qq = LLVMGetTargetMachineData(mach);
	
	LLVMSetTarget(c->module, triple);
	//LLVMSetDataLayout(c->module, triple);//qq);
	
	LLVMTargetMachineEmitToFile(mach, c->module, "test.o", 1/*codegen*/, 0);
	
	LLVMDisposeTargetMachine(mach);

	return c;
}

namespace Jet
{
	struct Compiler
	{
		int x;
		fun void Compile(char* command)
		{
		
		}
	}
	
	struct Compilation
	{
		LLVMModuleRef module;
		
		fun void ~Compilation()
		{
			LLVMDisposeModule(this->module);
		}
	}
}

fun void main()
{
	let Jet::Compiler c;
	
	MakeCompilation("jetcore");
	
	c.Compile("jetcore");
}
