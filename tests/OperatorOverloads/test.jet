
extern fun int printf(char* h, int h);
extern fun char* malloc(int x);

extern fun int puts(char* str);

extern fun char getchar();

struct A
{
	int a_val;
}

struct B
{
	int b_val;
	int data[50];
	
	fun B operator +(int other)
	{
		let B res;
		res.b_val = this->b_val+other;
		return res;
	}
	
	fun B operator -(int other)
	{
		let B res;
		res.b_val = this->b_val-other;
		return res;
	}
	
	fun B operator*(int other)
	{
		let B res;
		res.b_val = this->b_val*other;
		return res;
	}
	
	fun B operator/(int other)
	{
		let B res;
		res.b_val = this->b_val/other;
		return res;
	}
	
	//int* data;
	fun int* operator[](int index)
	{
		return &this->data[index];
	}
	
}

union C = A | B;

fun int main() 
{
	let B q;
	//printf("vtable %i\n",<int>q.__vtable);
	//printf("first entry %i\n", <int>q.__vtable[0]);
	//printf("vtable global %i\n", <int>&__B_vtable);
	//printf("first entry %i\n", <int>__B_vtable[0]);
	
	//q.b_val = 0;
	q = q + 5;
	q = q - 4;
	q = q * 5;
	q = q / 5;
	//puts("hello");
	
	//let int arr[50];
	//q.data = &arr[0];
	q[5] = 2;
	
	if (q[5] != 2)
		puts("fail\n");
	else
		puts("pass\n");
	
	printf("%i", q[5]);
	//getchar();
	return 0;
}