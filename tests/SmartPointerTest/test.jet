
extern fun int printf(char* h, int h, int p);
extern fun char* malloc(int x);
extern fun void free(char* dat);

extern fun int puts(char* str);

local int count = 0;

trait Any
{

}

fun void ExaminePointer(char* ptr)
{
	local long ptrl = <long>ptr;
	ptrl -= 4;
	local int* nptr = <int*><char*>ptrl;
	local int count = (*nptr);
	printf("Pointer: %x Count: %i", (<int>ptr), count);
}

struct SmartPointer<Any T>
{
	T ptr;
	fun void SmartPointer()
	{
		//this->ptr = 0;
	}
	
	fun void ~SmartPointer()
	{
		//puts("freeing smart pointer\n");
		//ExaminePointer(<char*>this->ptr);
		free this->ptr;
		//puts("done freeing smart pointer\n");
	}
}

struct TestClass
{
	fun void TestClass()
	{
		//puts("allocated class\n");
		count += 1;
	}
	
	fun void ~TestClass()
	{
		//puts("freed class\n");
		count -= 1;
		//puts("done destructing class\n");
	}
}

struct TesterClass
{
	//SmartPointer<TestClass*> q;
	SmartPointer<TestClass*> p;
}

fun int main() 
{
	local p = new TestClass;
	//ExaminePointer(<char*>p);
	free p;
	if (1)
	{
		local TesterClass p;
		p.p.ptr = new TestClass;
		//ExaminePointer(<char*>p.p.ptr);
		//p.q.ptr = new TestClass;
	
	}
	if (count != 0)
		puts("fail\n");
	
	return 0;
}