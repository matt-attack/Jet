
extern_c fun int printf(char* h, int h);
extern_c fun char* malloc(int x);

extern_c fun void free(char* x);

extern_c fun int puts(char* str);

extern_c fun char getchar();

fun void _chkstk() {}

/* array internal format looks like so:
struct<Any T> Array
{
	int size;
	T* ptr;
}

internally implemented as passing this struct arround
(pointer points just to the values this allows it to be easily casted)

*/
trait Any
{
}

/*struct __Array<Any T>
{
	int size;
	T* values;
}*/

struct ArrayUser
{
  int[6] array;
  int test;
}

let int[10] global;

fun void test_function(int[] array, int desired_size)
{
	for (let i = 0; i < array.size; i++)
	{
		printf("Value %i\n", array[i]);
	}
	
	// check that the size is good
	if (array.size != desired_size)
	{
		puts("ERROR: The array size does not match in the function!\n");
	}
}

fun void test_static_local_array()
{
	let desired_size = 50;
	let int[50] y;
	
	// Tests illegally mutating the static array. The following lines should error:
	//y.size = 4;
	//y.ptr = 0;
	
	// The following lines should work
	y.ptr[0] = 42;
	y[0] = 42;
	let yptr = y.ptr;
	let ysize = y.size;
	
	// Make sure we can assign to each value
	for (let i = 0; i < y.size; i++)
	{
		// Use each method just in case
		y[i] = i;
		y.ptr[i] = i;
		
		if (y[i] != i || y.ptr[i] != i)
		{
			puts("ERROR: Value read does not match assigned!");
		}
	}
	
	// Make sure the size is correct
	if (y.size != desired_size)
	{
		puts("ERROR: The array size is incorrect!\n");
	}
	
	// Make sure we can use it as an argument
	test_function(y, y.size);
	
	// Try copying then check the size and values
	let y_copy = y;
	
	if (y_copy.size != desired_size)
	{
		puts("ERROR: The copied array size is incorrect!\n");
	}
}

fun void assign_test()
{
	let int[5000] y;
	
	/*for (let i = 0; i < y.size; i++)
	{
		y[i] = i;
	}*/
		
	let y_copy = y;
	
	/*if (y_copy.size != y.size)
	{
		puts("ERROR: The copied array size is incorrect!\n");
	}*/
	puts("Finished copy");
	
	/*for (let i = 0; i < y_copy.size; i++)
	{
		// Use each method just in case
		if (y_copy[i] != y[i])
		{
			puts("ERROR: Value in the copy doesnt match original!");
		}
		puts("1");
	}*/
}

fun int main() 
{
    test_static_local_array();
	
	assign_test();
	
	getchar();
	
	return 0;
}