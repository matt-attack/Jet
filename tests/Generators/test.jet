
extern fun int printf(char* h, int h);
extern fun char* malloc(int x);

extern fun int puts(char* str);

trait IEnumerator<TT>
{
	fun TT Current();
	
	fun void Reset();
	fun int MoveNext();
}

trait IEnumerable<T>
{
	fun IEnumerator<T> GetEnumerator();
}

fun void IEnumerable::Print()
{
	let enumer = this->GetEnumerator();
	while (enumer.MoveNext() == 1)
	{
		puts("Got one!");
	}
}

generator int test(char qp)
{
	let short y = 7;
	for (let q = 10; q < 15; q++)
	{
		yield q;
	}
		
	//puts("one");
	yield y;
	//puts("two");
	yield qp;
	//puts("three");
	yield 3;
}

generator int power(int number, int exponent)
{
	let result = 1;
	for (let i = 0; i < exponent; i++)
	{
		result = result * number;
		yield result;
	}
}

fun int main() 
{ 
	let x = power(2, 20);
	let p = 0;
	while (x.MoveNext())
	{
		p = x.Current();
		//printf("%i\n", x.Current());
	}
	if (p != 1048576)
		puts("fail");
	else
		puts("pass");
		
	let t = test(5);
	while (t.MoveNext())
	{
		p = t.Current();
		//printf("%i\n", t.Current());
	}
	if (p != 3)
		puts("fail");
	
	return 0;
}