
struct Pointy 
{ 
	int x; 
	double y; 
	int* q;
	int array;//[10];
	
	fun void print()
	{
		puts("hi from member function");
	} 
}

// This is used as backing structure for lamdbas
// do not change the order of these members, it is currently hardcoded
// inside jet
struct function<Any T>
{
	T fn;
	char data[64];// 64 bytes max capture size
}

trait Any
{

}

//[stdcall]
//extern_c fun int CreateThread(char* security_attributes, int stacksize, int(char*) function, char* data, int flags, int* threadid);

//[stdcall]
//extern_c fun int WaitForSingleObject(int threadid, int time);

struct Thread//<Any Function>
{
	//function<void()> fn;
	int thread_id;
	
	//fun void Thread(function<void()> fn)
	//{
		//this->fn = fn;
		//CreateThread(0, 0, <void(char*)>fn.ptr, &fn.data, 0, &this->thread_id);
	//}
	
	fun void Thread(int(char*) fn, char* data)
	{
		this.thread_id = 0;
		//CreateThread(0, 0, fn, data, 0, &this.thread_id);  
	}
	
	fun void ~Thread()
	{
		this.Join();
	}
	
	fun void Join()
	{
		//if (this.thread_id)
		//	WaitForSingleObject(this.thread_id, 0);
	}
	
	fun void Release()
	{
		this.thread_id = 0;
	}
}

extern_c fun char* malloc(int size);
extern_c fun void free(char* data);

//extern fun void printf(int arg1);

//extern fun int printf(char* h, int h);

extern_c fun int puts(char* str);	
/*fun Pointy Tttt(Pointy x)
{
	return x;
}

fun vector<int> Testing()
{
	local vector<int> y;
	
	//y.DoStuff();
	//local x = 7;
	//local char* file = fopen("testing.txt", "w");
	//local int p = fwrite("Hello!", 6, 1, file);
	//local int i = fclose(file);
	return y;
}	*/

//extern fun char* fopen(char* name, char* mode);

//extern fun int fclose(char* file);

//extern fun int fwrite(char* data, int x, int x, char* file);
