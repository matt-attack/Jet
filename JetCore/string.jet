
extern fun int strlen(char* str);
extern fun void strcpy(char* dest, char* src);

let int v;// = 7;
struct string
{
	char* data;
	int max_size;
	int cur_size; 
	
	fun void string()
	{
		//v = 8;
		//puts("constructed string");
		this->data = new char[4];//<char*>malloc(sizeof(char)*4);
		this->max_size = 4;
		this->cur_size = 1;
		this->data[0] = 0;
	}
	
	/*fun void string(char* data)
	{
		local size = strlen(data);
		this->data = <char*>malloc(sizeof(char)*(size+2));
		this->max_size = size+2;
		this->cur_size = size;
		strcpy(this->data, data);
	}*/
	
	fun void ~string()
	{
		//puts("freeing string");
		free this->data;
		//puts("Freed string");
		//free(<char*>this->data);
	}
	
	fun int length()
	{
		return this->cur_size-1;//returns length of string, not the number of free chars
	}
	
	fun void push_back(char v)
	{
		if (this->cur_size >= this->max_size)
		{
			//resize
			this->resize(this->cur_size*2);
		}
		
		this->data[this->cur_size++] = v;
	}
	
	fun void assign(char* str)
	{	
		this->resize(100);
		let len = 0;
		while (str[len] != 0)
		{
			this->data[len] = str[len];
			len++;
		}
		this->data[len] = 0;
		this->cur_size = len+1;
	}
	
	//fun char* operator[](int index)
	//{
	//	return &this->data[index];
	//}
	
	fun string operator+ (string other)
	{
		return *this;
	}
	
	fun void operator= (string* other)//this will be a constant value
	{
		//puts("assign");
		//printf("%i", other.length());
		let data = new char[other->length()+1];
		for (let i = 0; i < other->length() + 1; i++)
			data[i] = other->data[i];
			
		//puts("about to free");
		free this->data;//free(this->data);
		//puts("freed");
		this->max_size = other->length() + 1;
		this->cur_size = this->max_size;
		this->data = data;
		//puts("assign complete");
	}
	//fun void operator+(
	
	fun char* c_str()
	{
		return this->data;
	}
	
	fun void resize(int size)
	{
		//puts("resizing");
		let neww = new char[size];//<char*>malloc(sizeof(char)*size);
		
		//copy
		for (let int i = 0; i < this->cur_size; i++)
		{
			neww[i] = this->data[i];
		}
		
		free this->data;
		//free(<char*>this->data);
		this->data = neww;
		this->max_size = size;
		//puts("done rezizing");
	}
}
