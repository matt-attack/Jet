
trait TestTrait
{
	fun void Test();
}

struct TraitTester<TestTrait T>
{
	T var;
}

struct function<Any T>
{
	T ptr;
	char data[64];
}

//[testattribute]
fun void ttttt()
{
	//puts("im a function pointer");
}

fun bool TestWhere(int x)
{
	return x > 5;
}

struct doubletest<Any x, Any y>
{
	x x;
	y y;
}

fun void apple(int y, int z)
{
	
}


trait IEnumerator<TT>
{
	fun TT Current();
	
	fun void Reset();
	fun bool MoveNext();
}

trait IEnumerable<T>
{
	fun IEnumerator<T> GetEnumerator();
}

fun int IEnumerable::DoStuff()
{
	//puts("helloooooo");
	return sizeof(T);
	//printf("Hi %d", sizeof(T));
}

fun void IEnumerable::Print()
{
	let eenum = this.GetEnumerator();
	while (eenum.MoveNext() == 1)
	{
		//puts("Got one!");
	}
}

struct WhereIterable<Any T, IEnumerable Base>
{
	Base* iterable;
	function<bool(T)> fn;
		
	fun WhereIterator<T, VectorIterator<T>> GetEnumerator()
	{
		let WhereIterator<T, VectorIterator<T>/*typeof(this->iterable->GetEnumerator())*/ > x;
		x.iter = this.iterable.GetEnumerator();
		x.fn = this.fn;
		return x;
	}
}

struct WhereIterator<Any T, IEnumerator Base>
{
	Base iter;
	function<bool(T)> fn;
		
	fun T Current()
	{
		return this.iter.Current();
	}
		
	fun void Reset()
	{
		this.iter.Reset();
	}
		
	fun int MoveNext()
	{
		while (this.iter.MoveNext())
		{
			let fn = this.fn;
			if (fn(this.iter.Current()))
				return 1;
		}
		return 0;
	}
}

fun WhereIterable<T, IEnumerable> IEnumerable::Where(function<bool(T)> fn)
{
	let WhereIterable<T, IEnumerable> x;
	x.iterable = this;
	x.fn = fn;
	return x;
}

fun int IEnumerable::Contains(T t)
{
	let eenum = this.GetEnumerator();
	while (eenum.MoveNext() == 1)
	{
		if (eenum.Current() == t)
			return 1;
	}
	return 0;
}

struct VectorIterator<Any TTT>
{
	int position;
	int size;
	TTT[] data;
	
	fun TTT Current()
	{
		return this.data[this.position];
	}
	
	fun void Reset()
	{
		this.position = 0;
	}
	
	fun bool MoveNext()
	{
		this.position++;
		let res = 0;
		if (this.position >= this.size)
			res = 0;
		else
			res = 1;
		return res;
	}
}

struct vector<Any TT>
{
	TT[] data;
	uint cur_size; 
	
	fun void vector()
	{
        puts("created vector");
		this.cur_size = 0;
		this.data = new TT[4];
	}
	
	fun void ~vector()
	{
        puts("destroying vector");
		free this.data;
        puts("destroyed vector");
	}
	
	fun VectorIterator<TT> GetEnumerator() const
	{
		let VectorIterator<TT> iter;
		iter.position = 0;//important to make sure it is always a valid number
		iter.size = this.cur_size;
		iter.data = this.data;
		return iter;
	}
	
	fun void push_back(TT v)
	{
		puts("pushed back");
		if (this.cur_size >= this.data.size)
		{
			//resize
			puts("resizing");
			this.resize(this.cur_size*2);
		}

		this.data[this.cur_size++] = v;
	}
	
	fun uint size() const
	{
		return this.cur_size;
	}
	
	fun TT* operator[](uint index)
	{
		return &this.data[index];
	}
	
	fun void resize(uint size)
	{
		let ne = new TT[size];

		//copy
		for (let int i = 0; i < this.cur_size; i++)
		{
			ne[i] = this.data[i];
		}
		
		free this.data;
		this.data = ne;
	}
}
